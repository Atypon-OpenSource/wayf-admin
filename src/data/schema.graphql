input AdminLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type AdminLoginPayload {
  token: AuthorizationTokenType
  clientMutationId: String
}

type AuthorizationTokenType {
  type: String
  value: String
  validUntil: Date
}

input CreatePublisherInput {
  publisherName: String!
  publisherCode: String!
  registrationId: Int
  contactFirstName: String!
  contactLastName: String!
  contactPhoneNumber: String!
  contactEmail: String!
  clientMutationId: String
}

type CreatePublisherPayload {
  publisher: PublisherType
  clientMutationId: String
}

input CreatePublisherRegistrationInput {
  publisherName: String!
  contactFirstName: String!
  contactLastName: String!
  contactPhoneNumber: String!
  contactEmail: String!
  clientMutationId: String
}

type CreatePublisherRegistrationPayload {
  publisherRegistration: PublisherRegistrationType
  clientMutationId: String
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  email: String!
  password: String!
  clientMutationId: String
}

type CreateUserPayload {
  user: UserType
  clientMutationId: String
}

# Date custom scalar type
scalar Date

input DenyPublisherRegistrationInput {
  publisherRegistrationId: Int!
  clientMutationId: String
}

type DenyPublisherRegistrationPayload {
  publisherRegistration: PublisherRegistrationType
  clientMutationId: String
}

type DeviceAccessType {
  localId: String
  device: DeviceType
  identityProvider: IdentityProviderType
  publisher: PublisherType
  type: DeviceAccessTypeEnum
  createdDate: Date
  modifiedDate: Date
}

enum DeviceAccessTypeEnum {
  REMOVE_IDP
  READ_IDP_HISTORY
  ADD_IDP
}

type DeviceInfoType {
  userAgent: String
}

type DeviceType {
  globalId: String
  status: String
  info: DeviceInfoType
  history: [IdentityProviderUsageType]
  activity: [DeviceAccessType]
  createdDate: Date
  modifiedDate: Date
}

input ForgetIdpInput {
  idpId: Int!
  clientMutationId: String
}

type ForgetIdpPayload {
  viewer: viewer
  clientMutationId: String
}

type IdentityProviderType {
  id: Int
  type: IdentityProviderTypeEnum
  name: String
  createdDate: Date
  modifiedDate: Date
}

enum IdentityProviderTypeEnum {
  SAML
  OAUTH
  OPEN_ATHENS
}

type IdentityProviderUsageType {
  lastActiveDate: Date
  frequency: Float
  idp: IdentityProviderType
}

type Mutation {
  forgetIdp(input: ForgetIdpInput!): ForgetIdpPayload
  createPublisherRegistration(input: CreatePublisherRegistrationInput!): CreatePublisherRegistrationPayload
  createPublisher(input: CreatePublisherInput!): CreatePublisherPayload
  denyPublisherRegistration(input: DenyPublisherRegistrationInput!): DenyPublisherRegistrationPayload
  adminLogin(input: AdminLoginInput!): AdminLoginPayload
  createUser(input: CreateUserInput!): CreateUserPayload
}

type PublisherRegistrationType {
  id: Int
  status: String
  publisherName: String
  contact: UserType
  applicationDate: Date
  approvalDate: Date
  createdDate: Date
  modifiedDate: Date
}

type PublisherType {
  id: String
  status: String
  code: String
  name: String
  contact: UserType
  registration: PublisherRegistrationType
  widgetLocation: String
  token: String
  createdDate: Date
  modifiedDate: Date
}

type Query {
  viewer: viewer
  publisherRegistration: PublisherRegistrationType
}

type UserType {
  id: Int
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  createdDate: Date
  modifiedDate: Date
}

type viewer {
  viewerId: String
  me: UserType
  device(globalId: String): DeviceType
  identityProvider(id: Int): IdentityProviderType
  publisher(id: String): PublisherType
  history(globalId: String): [IdentityProviderUsageType]
  latestActivity(globalId: String): DeviceAccessType
  pendingPublisherRegistrations: [PublisherRegistrationType]
  approvedPublisherRegistrations: [PublisherRegistrationType]
  deniedPublisherRegistrations: [PublisherRegistrationType]
}
